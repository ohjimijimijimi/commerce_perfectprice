<?php

/**
 * Implementation of hook_field_info().
 */
function commerce_perfectprice_field_field_info() {
	$info = array();

	$thresholds = array();
	$thresholds[0] = array(
		'units' => 0, 
		'discount' => 0,
	);
	
	$info['commerce_perfectprice_field'] = array(
		'label' => t('PeRfect Price'),
		'description' => t('This field store PeRfect Price configuration in the database.'),
		'settings' => array(
			'max_threshold' => 10,	
		),
		'instance_settings' => array(
			'thresholds' => $thresholds,
		),
		'default_widget' => 'commerce_perfectprice_field_widget', 
		'default_formatter' => 'commerce_perfectprice_field_formatter', 
	);

	return $info;
}

/**
 * Implementation of hook_field_is_empty().
 * 
 * @todo: Define when a PeRfect Price field is considered empty.
 */
function commerce_perfectprice_field_field_is_empty($item, $field) {
	if ($field['type'] == 'commerce_perfectprice_field') {
		watchdog('commerce_perfectprice_field', 'TODO: Define when a PeRfect Price field is considered empty.');
		//dpm($item);
		return FALSE;
	}
}

/**
 * Implementations of hook_field_settings_form().
 */
function commerce_perfectprice_field_field_settings_form($field, $instance, $has_data) {
	$form = array();

	$form['max_threshold'] = array(
		'#type' => 'textfield', 
		'#title' => t('Max number of thresholds'),
		'#default_value' => $field['settings']['max_threshold'], 
		'#element_validate' => array('element_validate_integer_positive'),
		'#description' => t('Define how many threshold this product should have.'),
	);

	return $form;
}

/**
 * Implementations of hook_field_validate().
 */
function commerce_perfectprice_field_field_validate($entity_type, $entity, $field, $instance, $langcode, $items, &$errors) {
	if ($field['type'] == 'commerce_perfectprice_field') {
		$max_threshold = $field['settings']['max_threshold'];
		foreach ($items as $delta => $item) {
			foreach ($item['thresholds'] as $threshold_id => $threshold) {
				if ($threshold_id > 0) {
					$previous = $item['thresholds'][$threshold_id - 1];
					if ($threshold['units'] >= $previous['units']) {
						$errors[$field['field_name']][$langcode][$delta][] = array(
							'error' => 'commerce_perfectprice_field_error_units', 
							'message' => t('%name [threshold #%number]: the units value may not be greater than previous one (%previous).', array('%name' => $instance['label'], '%number' => $threshold_id, '%previous' => $previous['units'])),
						);
					}
					if ($threshold['discount'] >= $$previous['discount']) {
						$errors[$field['field_name']][$langcode][$delta][] = array(
							'error' => 'commerce_perfectprice_field_error_discount', 
							'message' => t('%name [threshold #%number]: the discount value may not be greater than previous one (%previous).', array('%name' => $instance['label'], '%number' => $threshold_id, '%previous' => $previous['discount'])),
						);
					}
				}
			}
		}
	}
}

/**
 * Implementation of hook_field_load().
 */
function commerce_perfectprice_field_field_load($entity_type, $entities, $field, $instances, $langcode, &$items, $age) {
	foreach ($entities as $id => $entity) {
		foreach ($items[$id] as $delta => $item) {
			if (!empty($item['thresholds'])) {
				$items[$id][$delta]['thresholds'] = unserialize($item['thresholds']);
			} else {
				$items[$id][$delta]['thresholds'] = array('threshold_1' => array('units' => '', 'discount' => ''));
			}
		}
	}
}

/**
 * Implementation of hook_field_presave().
 */
function commerce_perfectprice_field_field_presave($entity_type, $entity, $field, $instance, $langcode, &$items) {
	foreach($items as $delta => $item) {
		if (isset($item['thresholds'])) {
			$items[$delta]['thresholds'] = serialize($item['thresholds']);
		}
	}
}

/**
 * Implementation of hook_field_attach_insert().
 */
function commerce_perfectprice_field_field_attach_insert($entity_type, $entity) {
	_commerce_perfectprice_field_attach_unserialized_thresholds($entity_type, $entity);
}

/**
 * Implementation of hook_field_attach_update().
 */
function commerce_perfectprice_field_field_attach_update($entity_type, $entity) {
	_commerce_perfectprice_field_attach_unserialized_thresholds($entity_type, $entity);
}

function _commerce_perfectprice_field_attach_unserialized_thresholds($entity_type, $entity) {
	$options = array(
		'default' => FALSE,
		'deleted' => FALSE,
		'language' => NULL,
	);

	// Determine the list of instances to iterate on.
	list(, , $bundle) = entity_extract_ids($entity_type, $entity);
	$instances = _field_invoke_get_instances($entity_type, $bundle, $options);

	// Iterate through the instances and collect results.
	$return = array();
	foreach ($instances as $instance) {
		$field_name = $instance['field_name'];
		$field = field_info_field($field_name);

		// If the instance is a price field with data...
		if ($field['type'] == 'commerce_perfectprice_field' && isset($entity->{$field_name})) {
			// Iterate over the items arrays for each language.
			foreach (array_keys($entity->{$field_name}) as $langcode) {
				$items = isset($entity->{$field_name}[$langcode]) ? $entity->{$field_name}[$langcode] : array();

				// For each item in the array, unserialize or initialize its data array.
				foreach ($items as $delta => $item) {
					// If we have a non-array $item['data'], unserialize it.
					if (!empty($item['thresholds']) && !is_array($item['thresholds'])) {
						$entity->{$field_name}[$langcode][$delta]['thresholds'] = unserialize($item['thresholds']);
					}
					// If we have no data element (or an existing empty), create an empty
					// array.
					elseif (empty($item['thresholds'])) {
						$entity->{$field_name}[$langcode][$delta]['thresholds'] = array('threshold_1' => array('units' => '', 'discount' => ''));
					}
				}
			}
		}
	}
}


/**
 * Implementations of hook_field_widget_info().
 */
function commerce_perfectprice_field_field_widget_info() {
	$widget = array();

	$widget['commerce_perfectprice_field'] = array(
		'label' => t('PeRfect Price'),
		'field types' => array('commerce_perfectprice_field'),
		'settings' => array(),
		'behaviors' => array(
			'multiple values' => FIELD_BEHAVIOR_DEFAULT, 
			'default value' => FIELD_BEHAVIOR_DEFAULT,
		),
	);

	return $widget;
}

/**
 * Implementation of hook_field_widget_form().
 */
function commerce_perfectprice_field_field_widget_form(&$form, &$form_state, $field, $instance, $langcode, $items, $delta, $element) {
	$base = $element;

	// Build the options array based on the field settings.
	$range = range(0, $field['settings']['max_threshold']);
	unset($range[0]);

	$threshold_number = _commerce_perfectprice_field_get_threshold_number_value($form_state, $field, $langcode, $items, $delta);
	dpm($threshold_number);

	$element = array(
		'#type' => 'fieldset', 
		'#prefix' => '<div id="thresholds-replace">',
		'#suffix' => '</div>',
	);

	$element['threshold_number'] = array(
		'#type' => 'select', 
		'#title' => t('Threshold number'),
		'#description' => t('Choose how many threshold do you want to configure.'),
		'#options' => $range,
		'#ajax' => array(
			'callback' => 'commerce_perfectprice_field_field_widget_form_add_thresholds',
			'wrapper' => 'thresholds-replace', 
		),
		'#default_value' => $threshold_number,
	);

	$range_init = 1;
	if (!empty($items[$delta]['thresholds'])) {
		$range_init += count($items[$delta]['thresholds']);
		foreach ($items[$delta]['thresholds'] as $threshold_id => $threshold) {
			_commerce_perfectprice_field_build_threshold_form_array($element, $threshold_id, $threshold);
		}
	} 


	if ($range_init <= $threshold_number) {
		foreach (range($range_init, $threshold_number) as $threshold_id) {
			// pass through the last $threshold as a starting point.
			_commerce_perfectprice_field_build_threshold_form_array($element, $threshold_id, $threshold);
		}
	}

	$element += $base;

	return $element;
}

function _commerce_perfectprice_field_get_threshold_number_value($form_state, $field, $langcode, $items, $delta) {
	$field_name = $field['field_name'];
	$threshold_number = !empty($form_state['values'][$field_name])
		? $form_state['values'][$field_name][$langcode][$delta]['threshold_number'] 
		: $items[$delta]['threshold_number'];

	dpm($form_state);
	// TODO: doesn't work. understand why
	if (isset($form_state['triggering_element']) && $form_state['triggering_element']['#name'] == 'op_delete') {
		$threshold_number--;
	}
	dpm($threshold_number);

	return $threshold_number;
}

function _commerce_perfectprice_field_build_threshold_form_array(&$element, $threshold_id, $threshold = array()) {
	$fieldset = $threshold_id;
	if (strpos($threshold_id, 'threshold_') === FALSE) {
		$fieldset = "threshold_{$threshold_id}";
	} else {
		preg_match('/threshold_([0-9]+)/', $threshold_id, $matches);
		$threshold_id = $matches[1]; 
	}

	$element['thresholds'][$fieldset] = array(
		'#type' => 'fieldset', 
		'#title' => t('Threshold #%number', array('%number' => $threshold_id)), 
		'#collapsible' => FALSE, 
		'#collapsed' => FALSE,
		'#prefix' => '<div id="'.$fieldset.'">',
		'#suffix' => '</div>',
	);

	$element['thresholds'][$fieldset]['units'] = array(
		'#type' => 'textfield',
		'#title' => t('Units'), 
		'#default_value' => $threshold['units'],
	);

	$element['thresholds'][$fieldset]['discount'] = array(
		'#type' => 'textfield',
		'#title' => t('Discount'), 
		'#default_value' => $threshold['discount'],
	);

	$element['thresholds'][$fieldset]['delete_threshold'] = array(
		'#type' => 'button', 
		'#value' => t('delete'),
		'#name' => 'op_delete', 
		'#ajax' => array(
			'callback' => 'commerce_perfectprice_field_field_widget_form_delete_threshold', 
			'wrapper' => $fieldset,
		),
	);
}

/**
 * AJAX callback function for widget form.
 */
function commerce_perfectprice_field_field_widget_form_add_thresholds($form, $form_state) {
	return $form['field_perfect_price'];
}

/**
 * AJAX callback to delete the specified threshold.
 *
 * Remove the fieldset.
 */
function commerce_perfectprice_field_field_widget_form_delete_threshold($form, $form_state) {
	return '';
}

/**
 * Implementation of hook_field_formatter().
 */
function commerce_perfectprice_field_field_formatter_info() {
	$formatter = array();

	$formatter['commerce_perfectprice_field_default'] = array(
		'label' => t('PeRfect Price'),
		'field types' => array('commerce_perfectprice_field'),
	);

	return $formatter;
}

/**
 * Implementation of hook_field_formatter_settings_form().
 */
//function commerce_perfectprice_field_field_formatter_settings_form($field, $instance, $view_mode, $form, &$form_state) {
//}

/**
 * Implementation of hook_field_formatter_summary().
 */
//function commerce_perfectprice_field_field_formatter_summary($field, $instance, $view_mode) {
//}

/**
 * Implementation of hook_field_formatter_view().
 */
function commerce_perfectprice_field_field_formatter_view($obj_type, $object, $field, $instance, $langcode, $items, $display) {
	$element = array();
	$settings = $display['settings'];

	dpm($obj_type);
	dpm($object);
	dpm($field);
	dpm($instance);
	dpm($items);
	dpm($display);
	dpm($settings);

	return $element;
}
